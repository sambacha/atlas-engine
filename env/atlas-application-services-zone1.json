{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String"
    },
    "DockerUsername": {
      "Description": "Dockerhub username for pulling docker images for the services",
      "Type": "String"
    }
  },
  "Mappings": {
    "RegionToAMIMap": {
      "us-east-1": {
        "AMI": "ami-0323c3dd2da7fb37d"
      },
      "us-east-2": {
        "AMI": "ami-0f7919c33c90f5b58"
      },
      "us-west-1": {
        "AMI": "ami-06fcc1f0bc2c8943f"
      },
      "us-west-2": {
        "AMI": "ami-0d6621c01e8c2de2c"
      }
    }
  },
  "Resources": {
    "AtlasProductSvcZone1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAMIMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "AtlasAppSgId"
            }
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasAppSubnetIdZone1"
          }
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": "AdminAccess",
        "Tags": [
          {
            "Key": "Name",
            "Value": "atlas-product-svc-zone1"
          },
          {
            "Key": "Cloudformation",
            "Value": "Yes"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex",
                "\n",
                "yum update -y",
                "\n",
                "yum install docker -y",
                "\n",
                "systemctl start docker",
                "\n",
                "systemctl enable docker",
                "\n",
                "usermod -aG docker ec2-user",
                "\n",
                "yum install gcc -y",
                "\n",
                "yum install python-pip -y",
                "\n",
                "yum install postgresql-devel python-devel -y",
                "\n",
                "pip install pgcli==2.2.0",
                "\n",
                "docker pull ",
                { "Ref": "DockerUsername" },
                "/atlas-products-aws:latest",
                "\n",
                "mkdir ~ec2-user/atlas-security",
                "\n",
                "aws s3 cp s3://atlas-security/atlas-product.p12 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "aws s3 cp s3://atlas-security/product.txt ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "aws s3 cp s3://atlas-security/internal-ca.crt ~ec2-user/atlas-security/",
                "\n",
                "chown -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chgrp -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chmod 700 ~ec2-user/atlas-security",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/internal-ca.crt",
                "\n",
                "echo \"#!/bin/bash\" >>  ~ec2-user/run-product-svc.sh",
                "\n",
                "echo \"docker run -d -v /home/ec2-user/atlas-security:/atlas-security -p 443:8443 ",
                "-e TLS_KEYSTORE=/atlas-security/keystore.p12 ",
                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/atlas-security/keystore-pass.txt` ",
                "-e spring_profiles=aws ",
                "-e config_server_uri=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                " ",
                "-e ATLAS_DISCOVERY_URI=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                "/eureka ",
                "-e ATLAS_DISCOVERY_CLIENT_HOSTNAME=i1.product.atlas.com ",
                "--name atlas-product ",
                { "Ref": "DockerUsername" },
                "/atlas-products-aws:latest\" >> ~ec2-user/run-product-svc.sh",
                "\n",
                "chown ec2-user ~ec2-user/run-product-svc.sh",
                "\n",
                "chgrp ec2-user ~ec2-user/run-product-svc.sh",
                "\n",
                "chmod 755 ~ec2-user/run-product-svc.sh",
                "\n",
                "~ec2-user/run-product-svc.sh",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AtlasParticipantSvcZone1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAMIMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "AtlasAppSgId"
            }
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasAppSubnetIdZone1"
          }
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": "AdminAccess",
        "Tags": [
          {
            "Key": "Name",
            "Value": "atlas-participant-svc-zone1"
          },
          {
            "Key": "Cloudformation",
            "Value": "Yes"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex",
                "\n",
                "yum update -y",
                "\n",
                "yum install docker -y",
                "\n",
                "systemctl start docker",
                "\n",
                "systemctl enable docker",
                "\n",
                "usermod -aG docker ec2-user",
                "\n",
                "yum install gcc -y",
                "\n",
                "yum install python-pip -y",
                "\n",
                "yum install postgresql-devel python-devel -y",
                "\n",
                "pip install pgcli==2.2.0",
                "\n",
                "docker pull ",
                { "Ref": "DockerUsername" },
                "/atlas-participants-aws:latest",
                "\n",
                "mkdir ~ec2-user/atlas-security",
                "\n",
                "aws s3 cp s3://atlas-security/atlas-participant.p12 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "aws s3 cp s3://atlas-security/participant.txt ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "aws s3 cp s3://atlas-security/internal-ca.crt ~ec2-user/atlas-security/",
                "\n",
                "chown -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chgrp -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chmod 700 ~ec2-user/atlas-security",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/internal-ca.crt",
                "\n",
                "echo \"#!/bin/bash\" >>  ~ec2-user/run-participant-svc.sh",
                "\n",
                "echo \"docker run -d -v /home/ec2-user/atlas-security:/atlas-security -p 443:8443 ",
                "-e TLS_KEYSTORE=/atlas-security/keystore.p12 ",
                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/atlas-security/keystore-pass.txt` ",
                "-e spring_profiles=aws ",
                "-e config_server_uri=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                " ",
                "-e ATLAS_DISCOVERY_URI=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                "/eureka ",
                "-e ATLAS_DISCOVERY_CLIENT_HOSTNAME=i1.participant.atlas.com ",
                "--name atlas-participant ",
                { "Ref": "DockerUsername" },
                "/atlas-participants-aws:latest\" >> ~ec2-user/run-participant-svc.sh",
                "\n",
                "chown ec2-user ~ec2-user/run-participant-svc.sh",
                "\n",
                "chgrp ec2-user ~ec2-user/run-participant-svc.sh",
                "\n",
                "chmod 755 ~ec2-user/run-participant-svc.sh",
                "\n",
                "~ec2-user/run-participant-svc.sh",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AtlasOrderSvcZone1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAMIMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "AtlasAppSgId"
            }
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasAppSubnetIdZone1"
          }
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": "AdminAccess",
        "Tags": [
          {
            "Key": "Name",
            "Value": "atlas-order-svc-zone1"
          },
          {
            "Key": "Cloudformation",
            "Value": "Yes"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex",
                "\n",
                "yum update -y",
                "\n",
                "yum install docker -y",
                "\n",
                "systemctl start docker",
                "\n",
                "systemctl enable docker",
                "\n",
                "usermod -aG docker ec2-user",
                "\n",
                "yum install gcc -y",
                "\n",
                "yum install python-pip -y",
                "\n",
                "yum install postgresql-devel python-devel -y",
                "\n",
                "pip install pgcli==2.2.0",
                "\n",
                "docker pull ",
                { "Ref": "DockerUsername" },
                "/atlas-orders-aws:latest",
                "\n",
                "mkdir ~ec2-user/atlas-security",
                "\n",
                "aws s3 cp s3://atlas-security/atlas-order.p12 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "aws s3 cp s3://atlas-security/order.txt ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "aws s3 cp s3://atlas-security/internal-ca.crt ~ec2-user/atlas-security/",
                "\n",
                "chown -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chgrp -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chmod 700 ~ec2-user/atlas-security",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/internal-ca.crt",
                "\n",
                "echo \"#!/bin/bash\" >>  ~ec2-user/run-order-svc.sh",
                "\n",
                "echo \"docker run -d -v /home/ec2-user/atlas-security:/atlas-security -p 443:8443 ",
                "-e TLS_KEYSTORE=/atlas-security/keystore.p12 ",
                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/atlas-security/keystore-pass.txt` ",
                "-e spring_profiles=aws ",
                "-e config_server_uri=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                " ",
                "-e ATLAS_DISCOVERY_URI=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                "/eureka ",
                "-e ATLAS_DISCOVERY_CLIENT_HOSTNAME=i1.order.atlas.com ",
                "--name atlas-order ",
                { "Ref": "DockerUsername" },
                "/atlas-orders-aws:latest\" >> ~ec2-user/run-order-svc.sh",
                "\n",
                "chown ec2-user ~ec2-user/run-order-svc.sh",
                "\n",
                "chgrp ec2-user ~ec2-user/run-order-svc.sh",
                "\n",
                "chmod 755 ~ec2-user/run-order-svc.sh",
                "\n",
                "~ec2-user/run-order-svc.sh",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AtlasOrderbookSvcZone1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAMIMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "AtlasAppSgId"
            }
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasAppSubnetIdZone1"
          }
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": "AdminAccess",
        "Tags": [
          {
            "Key": "Name",
            "Value": "atlas-orderbook-svc-zone1"
          },
          {
            "Key": "Cloudformation",
            "Value": "Yes"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex",
                "\n",
                "yum update -y",
                "\n",
                "yum install docker -y",
                "\n",
                "systemctl start docker",
                "\n",
                "systemctl enable docker",
                "\n",
                "usermod -aG docker ec2-user",
                "\n",
                "yum install gcc -y",
                "\n",
                "yum install python-pip -y",
                "\n",
                "yum install postgresql-devel python-devel -y",
                "\n",
                "pip install pgcli==2.2.0",
                "\n",
                "docker pull ",
                { "Ref": "DockerUsername" },
                "/atlas-orderbooks-aws:latest",
                "\n",
                "mkdir ~ec2-user/atlas-security",
                "\n",
                "aws s3 cp s3://atlas-security/atlas-orderbook.p12 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "aws s3 cp s3://atlas-security/orderbook.txt ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "aws s3 cp s3://atlas-security/internal-ca.crt ~ec2-user/atlas-security/",
                "\n",
                "chown -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chgrp -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chmod 700 ~ec2-user/atlas-security",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/internal-ca.crt",
                "\n",
                "echo \"#!/bin/bash\" >>  ~ec2-user/run-orderbook-svc.sh",
                "\n",
                "echo \"docker run -d -v /home/ec2-user/atlas-security:/atlas-security -p 443:8443 ",
                "-e TLS_KEYSTORE=/atlas-security/keystore.p12 ",
                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/atlas-security/keystore-pass.txt` ",
                "-e spring_profiles=aws ",
                "-e config_server_uri=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                " ",
                "-e ATLAS_DISCOVERY_URI=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                "/eureka ",
                "-e ATLAS_DISCOVERY_CLIENT_HOSTNAME=i1.orderbook.atlas.com ",
                "--name atlas-orderbook ",
                { "Ref": "DockerUsername" },
                "/atlas-orderbooks-aws:latest\" >> ~ec2-user/run-orderbook-svc.sh",
                "\n",
                "chown ec2-user ~ec2-user/run-orderbook-svc.sh",
                "\n",
                "chgrp ec2-user ~ec2-user/run-orderbook-svc.sh",
                "\n",
                "chmod 755 ~ec2-user/run-orderbook-svc.sh",
                "\n",
                "~ec2-user/run-orderbook-svc.sh",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AtlasTradeSvcZone1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAMIMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "AtlasAppSgId"
            }
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasAppSubnetIdZone1"
          }
        },
        "InstanceType": "t2.micro",
        "IamInstanceProfile": "AdminAccess",
        "Tags": [
          {
            "Key": "Name",
            "Value": "atlas-trade-svc-zone1"
          },
          {
            "Key": "Cloudformation",
            "Value": "Yes"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex",
                "\n",
                "yum update -y",
                "\n",
                "yum install docker -y",
                "\n",
                "systemctl start docker",
                "\n",
                "systemctl enable docker",
                "\n",
                "usermod -aG docker ec2-user",
                "\n",
                "yum install gcc -y",
                "\n",
                "yum install python-pip -y",
                "\n",
                "yum install postgresql-devel python-devel -y",
                "\n",
                "pip install pgcli==2.2.0",
                "\n",
                "docker pull ",
                { "Ref": "DockerUsername" },
                "/atlas-trades-aws:latest",
                "\n",
                "mkdir ~ec2-user/atlas-security",
                "\n",
                "aws s3 cp s3://atlas-security/atlas-trade.p12 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "aws s3 cp s3://atlas-security/trade.txt ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "aws s3 cp s3://atlas-security/internal-ca.crt ~ec2-user/atlas-security/",
                "\n",
                "chown -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chgrp -R ec2-user ~ec2-user/atlas-security",
                "\n",
                "chmod 700 ~ec2-user/atlas-security",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore.p12",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/keystore-pass.txt",
                "\n",
                "chmod 600 ~ec2-user/atlas-security/internal-ca.crt",
                "\n",
                "echo \"#!/bin/bash\" >>  ~ec2-user/run-trade-svc.sh",
                "\n",
                "echo \"docker run -d -v /home/ec2-user/atlas-security:/atlas-security -p 443:8443 ",
                "-e TLS_KEYSTORE=/atlas-security/keystore.p12 ",
                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/atlas-security/keystore-pass.txt` ",
                "-e spring_profiles=aws ",
                "-e config_server_uri=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                " ",
                "-e ATLAS_DISCOVERY_URI=https://",
                { "Fn::ImportValue": { "Fn::Sub": "AtlasInternalAlbDnsName" } },
                "/eureka ",
                "-e ATLAS_DISCOVERY_CLIENT_HOSTNAME=i1.trade.atlas.com ",
                "--name atlas-trade ",
                { "Ref": "DockerUsername" },
                "/atlas-trades-aws:latest\" >> ~ec2-user/run-trade-svc.sh",
                "\n",
                "chown ec2-user ~ec2-user/run-trade-svc.sh",
                "\n",
                "chgrp ec2-user ~ec2-user/run-trade-svc.sh",
                "\n",
                "chmod 755 ~ec2-user/run-trade-svc.sh",
                "\n",
                "~ec2-user/run-trade-svc.sh",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AtlasProductSvcZone1DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasPrivateHostedZoneId"
          }
        },
        "Name": "i1.product.atlas.com",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["AtlasProductSvcZone1", "PrivateIp"]
          }
        ],
        "TTL": "300",
        "Type": "A"
      }
    },
    "AtlasParticipantSvcZone1DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasPrivateHostedZoneId"
          }
        },
        "Name": "i1.participant.atlas.com",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["AtlasParticipantSvcZone1", "PrivateIp"]
          }
        ],
        "TTL": "300",
        "Type": "A"
      }
    },
    "AtlasOrderSvcZone1DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasPrivateHostedZoneId"
          }
        },
        "Name": "i1.order.atlas.com",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["AtlasOrderSvcZone1", "PrivateIp"]
          }
        ],
        "TTL": "300",
        "Type": "A"
      }
    },
    "AtlasOrderbookSvcZone1DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasPrivateHostedZoneId"
          }
        },
        "Name": "i1.orderbook.atlas.com",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["AtlasOrderbookSvcZone1", "PrivateIp"]
          }
        ],
        "TTL": "300",
        "Type": "A"
      }
    },
    "AtlasTradeSvcZone1DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::ImportValue": {
            "Fn::Sub": "AtlasPrivateHostedZoneId"
          }
        },
        "Name": "i1.trade.atlas.com",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["AtlasTradeSvcZone1", "PrivateIp"]
          }
        ],
        "TTL": "300",
        "Type": "A"
      }
    }
  }
}
